1、数组表示的是一组数据类型相同的数，这数组中每一个元素都是一个独立的变量，数组就是用来存储和处理
一组相同类型的数据的。
2、一维数组：使用同一个数组名存储一组数据类型相同的数据，用索引或者下标区别数组中的不同元素。
        数组名【常量表达式】；
        int code[5];  
        or      
        #define  NUM   5
        int code[NUM];
(1)数组使用的是方括号 []， 不是小括号（）。
(2)数组命名必须按照命名规则。
(3)C语言中数组下标总是从0开始标记的，下标不能超过常量表达式-1，否则会产生数组溢出错误，更不能出现负数。
(4)定义数组 code[5],5 表示定义数组中的元素总数。使用数组时，code[2] = 1;2表示的是数组中哪一个元素。
(5)定义数组方括号内一定是常量，定义完数组后，使用该数组的元素时，下标可以是常量、变量或者表达式。
3、 int array[10];   // 包含 10 个整型元素的数组名为 array 的数组，下标从 0-9
    float score[3];  // 包含 10 个浮点型元素的数组名为 score 的数组，下标从 0-2
    char name[5];    // 包含 10 个整型元素的数组名为 name 的数组，下标从 0-4
4、数组地址
它在内存中占据一块连续的存储区域。这个特点对于一维数组、二维数组、多维数组一样适用。
数组名就是数组的首地址。
5、一维数组初始化
(1)先定义数组，在进行初始化
int code[3];
code[0] = 3;
code[1] = 2;
code[2] = 1;
(2)在定义的同时初始化
int code[3] = {3, 2, 1};
int code[] = {3, 2, 1};
{}里的相当于数组元素的个数
!!!定义数组没有定义数组的元素的个数，使用就会产生异常，原因是没有为数组开辟任何存储空间，数组无法存放。
int code[10] = {1, 2, 3, 4, 5};   // 表示code共有 10 个元素，仅对前5个初始化，后面5个元素编译器自动赋0
int code[] = {1, 2, 3, 4, 5};     // 表示code共有 5 个元素，并且都进行初始化了

元素初始化为 0
int code[5] = {0, 0, 0, 0, 0};
or
int code[5] = {0};
以上两个赋 0 含义相同。
6、一维数组的操作
数组的特点是使用同一个变量名，不同的下标。
因此可以使用循环控制数组下标的值，进而访问不同的元素。
int i;
int array[5] = {1, 2, 3, 4, 5};
for (i = 0; i < 5; i++) {
    printf("%d", array[i]);
}
7、数组名作为参数传递
int array[5];
findMax(array);
需实参和形参数据类型一致。
void findMax(int a[5])
or 
void findMax(int a[])
调用函数时，变量时按照传值方式传递的，而数组是按照地址方式传递的。
对于变量，实参可以改变形参，形参改变不会影响实参；
对于数组不同，实参可以改变形参，形参的改变也会改变实参。
数组的实参和形参指向的都是同一个存储器。